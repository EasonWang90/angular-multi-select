/*
 Multiple-select directive for AngularJS
 (c) 2013 Alec LaLonde (https://github.com/alalonde/angular-multi-select)
 License: MIT
 */
!function(e){"use strict"
e.module("multi-select",["template/multiSelect.html"]).directive("multiSelect",["$q","$parse",function(l,t){function a(l){var t=[]
return e.forEach(l,function(e){var l=e
l.selected=!1,t.push(l)}),t}return{restrict:"E",require:"ngModel",scope:{selectedLabel:"@",availableLabel:"@",selectedPlaceholder:"@",availablePlaceholder:"@",available:"=",model:"=ngModel",config:"="},templateUrl:"template/multiSelect.html",link:function(l,n,c,i){function o(e,l){return b(e,l)}function r(e,l){var a=l.match(/(.+)\s+as\s+(.+)/),n={}
return n[a[1]]=e,t(a[2])(n)}function d(){s&&l.model&&(l.numSelected=l.model.length,u.$setValidity("min",l.numSelected>=s))}l.selected={available:[],current:[]}
var s,u,b=function(e){var l=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1)),t=function(e,l){return null==e?!1:_.any(e,function(e){return _.isEqual(e,l)})}
return _.filter(e,function(e){return!t(l,e)})}
l.refreshAvailable=function(){l.model&&l.available&&(l.available=o(l.available,l.model),l.selected.available=a(l.available),l.selected.current=a(l.model))},l.add=function(){l.model.length||0===l.model.length||(l.model=[]),l.model=l.model.concat(l.selected(l.selected.available))},l.addAll=function(){l.model.length||0===l.model.length||(l.model=[]),l.model=l.model.concat(l.available)},l.remove=function(){var e=l.selected(l.selected.current)
l.available=l.available.concat(e),l.model=o(l.model,e)},l.removeAll=function(){l.available=l.available.concat(l.model),l.model=o(l.model,l.model)},l.selected=function(l){var t=[]
return e.forEach(l,function(e){e.selected===!0&&t.push(e)}),t},l.watchModel=function(){l.model&&l.model.hasOwnProperty("$promise")&&!l.model.$resolved?l.model.then(function(e){l.$watch("model",l.watchModel)}):(l.refreshAvailable(),l.$watch("model",l.refreshAvailable))}
var m={}
if(l.watchAvailable=function(){l.available&&l.available.hasOwnProperty("$promise")&&!l.available.$resolved?l.available.$promise.then(function(e){l.$watch("available",l.watchAvailable)}):l.available&&l.available!=m&&(l.refreshAvailable(),m=l.available)},l.$watch("available",l.watchAvailable),l.$watch("model",l.watchModel),l.$watch("searchAvailable",l.watchAvailable),l.renderItem=function(e){return r(e,c.display)},l.identifyItem=function(e){return r(e,c.identify)},l.renderTitle=function(e){return c.title?r(e,c.title):""},l.config&&e.isDefined(l.config.requiredMin)){var v=n.find("input"),h=e.element(v[v.length-1])
u=h.controller("ngModel")}l.$watch("config.requiredMin",function(l){e.isDefined(l)&&(s=parseInt(l,10),d())}),l.$watch("model",function(e){d()})}}}]),e.module("template/multiSelect.html",[]).run(["$templateCache",function(e){e.put("template/multiSelect.html",'<div class="multiSelect"><div class="select"><label class="control-label" for="multiSelectAvailable">{{ availableLabel }} {{ availableLabel==""?"": "(" +available.length +")" }}</label><input ng-model="searchAvailable" class="search" placeholder="{{availablePlaceholder}}"><ul class = "availableList"><li ng-repeat="entity in available|filter:searchAvailable track by $index" ng-class="{\'selected\':entity.selected}"><label class="checkbox" title="{{ renderTitle(entity) }}"><input type="checkbox" ng-model="entity.selected"> {{ renderItem(entity) }}</label></li></ul></div><div class="select buttons"><button class="btn mover right" ng-click="add()" title="Add selected" ng-disabled="!selected(selected.available).length"><span class="glyphicon glyphicon-step-forward"></span></button><button class="btn mover right-all" ng-click="addAll()" title="Add all" ng-disabled="!available.length"><span class="glyphicon glyphicon-fast-forward"></span></button><button class="btn mover left" ng-click="remove()" title="Remove selected" ng-disabled="!selected(selected.current).length"><span class="glyphicon glyphicon-step-backward"></span></button><button class="btn mover left-all" ng-click="removeAll()" title="Remove all" ng-disabled="!model.length"><span class="glyphicon glyphicon-fast-backward"></span></button></div><div class="select"><label class="control-label" for="multiSelectSelected">{{ selectedLabel }} {{selectedLabel==""?"":"("+model.length+")"}}</label><input ng-model="searchSelected" class="search" placeholder="{{selectedPlaceholder}}"><ul class ="selectedList"><li ng-repeat="entity in model | filter:searchSelected track by $index"><label class="checkbox" title="{{ renderTitle(entity) }}"><input type="checkbox" ng-model="entity.selected"> {{ renderItem(entity) }}</label></li></ul></ul></div><input type="number" name="numSelected" ng-model="numSelected" style="display: none"></div>')}])}(angular)
